package integrity

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
)

// CheckMaliciousCodeProtection checks for malicious code protection mechanisms in GuardDuty, SSM (for EC2), and S3.
// 03.14.02
func CheckMaliciousCodeProtection(cfg aws.Config) error {
	ctx := context.TODO()

	// Step 1: Check if GuardDuty is enabled and active
	log.Println("Checking GuardDuty for malicious code detection...")
	if err := checkGuardDutyEnabled(ctx, cfg); err != nil {
		return fmt.Errorf("GuardDuty check failed: %v", err)
	}

	// Step 2: Check EC2 instances for antivirus/antimalware solutions using SSM
	log.Println("Checking EC2 instances for antivirus software using SSM...")
	if err := checkEC2AntivirusSoftware(ctx, cfg); err != nil {
		return fmt.Errorf("EC2 antivirus check failed: %v", err)
	}

	// Step 3: Check S3 buckets for malware scanning mechanisms
	log.Println("Checking S3 buckets for malware scanning...")
	if err := checkS3MalwareScanning(ctx, cfg); err != nil {
		return fmt.Errorf("S3 malware scanning check failed: %v", err)
	}

	log.Println("Malicious code protection checks completed successfully.")
	return nil
}

// checkGuardDutyEnabled checks if Amazon GuardDuty is enabled for detecting threats like malware.
func checkGuardDutyEnabled(ctx context.Context, cfg aws.Config) error {
	gdSvc := guardduty.NewFromConfig(cfg)

	// List all GuardDuty detectors
	log.Println("Listing GuardDuty detectors...")
	output, err := gdSvc.ListDetectors(ctx, &guardduty.ListDetectorsInput{})
	if err != nil {
		return fmt.Errorf("unable to list GuardDuty detectors: %v", err)
	}

	if len(output.DetectorIds) == 0 {
		return fmt.Errorf("GuardDuty is not enabled. No detectors found.")
	}

	for _, detectorId := range output.DetectorIds {
		log.Printf("GuardDuty is enabled. Detector ID: %s\n", detectorId)
	}

	return nil
}

// checkEC2AntivirusSoftware checks for installed antivirus software on EC2 instances using AWS Systems Manager (SSM).
func checkEC2AntivirusSoftware(ctx context.Context, cfg aws.Config) error {
	ssmSvc := ssm.NewFromConfig(cfg)

	// Describe EC2 instances managed by SSM
	log.Println("Retrieving EC2 instances managed by SSM...")
	output, err := ssmSvc.DescribeInstanceInformation(ctx, &ssm.DescribeInstanceInformationInput{})
	if err != nil {
		return fmt.Errorf("unable to describe SSM-managed instances: %v", err)
	}

	if len(output.InstanceInformationList) == 0 {
		log.Println("No instances managed by SSM found.")
		return nil
	}

	// Step 1: Check SSM Inventory for installed software
	for _, instanceInfo := range output.InstanceInformationList {
		log.Printf("Checking EC2 instance %s for antivirus software...\n", *instanceInfo.InstanceId)

		// Use SSM Inventory to check installed software
		inventoryOutput, err := ssmSvc.ListInventoryEntries(ctx, &ssm.ListInventoryEntriesInput{
			InstanceId: instanceInfo.InstanceId,
			TypeName:   aws.String("AWS:Application"),
		})
		if err != nil {
			return fmt.Errorf("unable to retrieve inventory for EC2 instance %s: %v", *instanceInfo.InstanceId, err)
		}

		// Check installed software for antivirus programs
		if !hasAntivirusSoftware(inventoryOutput.Entries) {
			log.Printf("Warning: EC2 instance %s does not have antivirus software installed.\n", *instanceInfo.InstanceId)
		} else {
			log.Printf("EC2 instance %s has antivirus software installed.\n", *instanceInfo.InstanceId)
		}
	}

	return nil
}

// hasAntivirusSoftware checks if antivirus software is installed by scanning the SSM inventory entries.
func hasAntivirusSoftware(entries []map[string]string) bool {
	for _, entry := range entries {
		// Check for common antivirus software
		if strings.Contains(strings.ToLower(entry["Name"]), "antivirus") || strings.Contains(strings.ToLower(entry["Name"]), "mcafee") || strings.Contains(strings.ToLower(entry["Name"]), "symantec") {
			return true
		}
	}
	return false
}

// checkS3MalwareScanning checks if S3 buckets have malware scanning mechanisms enabled (e.g., via Lambda triggers).
func checkS3MalwareScanning(ctx context.Context, cfg aws.Config) error {
	s3Svc := s3.NewFromConfig(cfg)

	// List all S3 buckets
	log.Println("Listing all S3 buckets...")
	result, err := s3Svc.ListBuckets(ctx, &s3.ListBucketsInput{})
	if err != nil {
		return fmt.Errorf("unable to list S3 buckets: %v", err)
	}

	for _, bucket := range result.Buckets {
		log.Printf("Checking S3 bucket: %s for malware scanning mechanisms...\n", *bucket.Name)

		// In a real implementation, you would check for Lambda functions triggered by S3 events
		// Here we simulate that S3 buckets are checked for malware scanning using third-party solutions or Lambda
		if !isMalwareScanningEnabled(*bucket.Name, cfg) {
			log.Printf("Warning: S3 bucket %s does not have malware scanning enabled.\n", *bucket.Name)
		} else {
			log.Printf("S3 bucket %s has malware scanning enabled.\n", *bucket.Name)
		}
	}

	return nil
}

// isMalwareScanningEnabled checks if malware scanning is enabled on an S3 bucket by verifying event notifications.
func isMalwareScanningEnabled(bucketName string, cfg aws.Config) bool {
	// Create a new S3 client
	s3Svc := s3.NewFromConfig(cfg)
	ctx := context.TODO()

	// Get the bucket notification configuration
	input := &s3.GetBucketNotificationConfigurationInput{
		Bucket: &bucketName,
	}

	log.Printf("Checking S3 bucket %s for malware scanning event notifications...", bucketName)

	// Fetch the bucket's notification configuration
	output, err := s3Svc.GetBucketNotificationConfiguration(ctx, input)
	if err != nil {
		log.Printf("Error fetching bucket notification configuration for %s: %v", bucketName, err)
		return false
	}

	// Check if there are Lambda function configurations in the notification configuration
	for _, lambdaConfig := range output.LambdaFunctionConfigurations {
		// Check if the Lambda function seems to be related to malware scanning (e.g., based on function name)
		if isMalwareScannerLambda(*lambdaConfig.LambdaFunctionArn) {
			log.Printf("S3 bucket %s is configured for malware scanning with Lambda function: %s", bucketName, *lambdaConfig.LambdaFunctionArn)
			return true
		}
	}

	// No malware scanning Lambda function found
	log.Printf("No malware scanning Lambda function found for S3 bucket %s.", bucketName)
	return false
}

// isMalwareScannerLambda checks if the Lambda function is likely used for malware scanning based on its ARN or name.
func isMalwareScannerLambda(lambdaFunctionArn string) bool {
	// In a real-world scenario, you would inspect the Lambda function ARN or name
	// For now, we'll simply check for keywords like "malware" or "scan"
	if containsKeywords(lambdaFunctionArn, []string{"malware", "scan", "virus", "clamav"}) {
		return true
	}
	return false
}

// containsKeywords checks if a string contains any of the given keywords.
func containsKeywords(str string, keywords []string) bool {
	for _, keyword := range keywords {
		if strings.Contains(str, keyword) {
			return true
		}
	}
	return false
}
